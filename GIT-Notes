Version Control :
Version control is a system that records changes to files over time, allowing you to track changes, revert to previous versions, and collaborate with others.
some popular tools : GIT, BitKeeper, Subversion, Mercurial etc....

GIT
Git is a distributed version control system, meaning every contributor has a complete history of the repository.

Why Git?
Tracks and manages changes to code.
Allows collaboration among multiple developers.
Provides a history of changes, enabling you to see what has been done and by whom.
Makes it easy to revert changes and fix mistakes.

User Configuration Commands :
git config --global user.name "user_name"
git config --global user.email "user_mail_id"

To view current configured user
git config --list

Workflow 
git init -> to initialize a empty repo
git status -> Shows the current status of files/Changes
git add <file> -> to stage files/changes to be committed.
git add . -> to stage all files/changes once
git commit -m "commit message" -> Commit changes with a descriptive message.
git reset HEAD <file> -> unstage changes that have been added to the staging area (staging to WorkSpace).
git rest HEAD -> unstage all the changes that have been added to the staging area.
git reset --soft cid(n-1) -> Uncommits changes but keeps them staged for editing or recommitting(local_repo to Staging).
git reset --mixed cid(n-1) -> Unstages all the files you've added to the staging area.

Working with remote Repo
git clone <repo_url>
git push -> Push to the default remote repository (origin) on the current branch.
git push origin <branch_name> -> To push to a specific remote and branch.
git push --all -> If you want to push all your local branches to the remote.
git pull -> Fetch changes from the remote repository and merge them into your local branch.
git pull origin <branch_name> -> pull changes from a specific remote repository and a specific branch.
git pull --rebase -> If you want to avoid the automatic merge commit and prefer to rebase your changes on top of the fetched commits (which can make the history cleaner)

Branching in GIT
git branch -> List all local branches.
git branch <branch-name> -> Create a new branch.
git checkout -b <branch-name> -> Create and switch to a new branch.
git branch -d <branch-name> -> Delete a branch.
git branch -D <branch-name> -> Force delete a branch.
git branch -r -> List remote branches.
git branch -a -> List all branches (local and remote).
git branch -m <new-branch-name> -> Rename the current branch.
git checkout <branch-name> or git switch <branch-name> -> Switch between branches.
git push origin <branch-name> -> push your local branch to a remote repository
git push origin -d <branch-name> -> delete a branch from the remote repository.
git cherry-pick <commit-id> -> takes a commit from another branch and applies it to your current branch. 

Filtering in GIT
git log -> Displays commit history.
git log --oneline -> Shows each commit in a single line.
git log -n <number> -> Limits the number of commits displayed.
git log --author="<name>" -> Shows commits by a specific author.
git log --grep="<pattern>" -> Filters commits by commit message.
git log <file-path> -> Shows commits that affected a specific file.
git log --since="<date>" --until="<date>" -> Filters commits by date range.
git log --stat -> Displays file changes in each commit.
git log -p -> Displays commit diffs (changes) in patch format.
git log --graph --oneline -> Visualizes the commit history as a graph.

GIT tags
In Git, tags are used to mark specific points in history as important, often to indicate releases or milestones.
Types of Tags
Lightweight tags: These are simple references to a commit. A lightweight tag is essentially just a commit hash and doesnâ€™t store any additional information (like the tagger's name or date).
Annotated tags: These are full objects in the Git database. They contain the tagger's name, email, date, and a tagging message. 
Annotated tags are often used for releases because they provide more information and are GPG-signable for verification.

git tag <tag-name> -> Create a lightweight tag
git tag -a <tag-name> -m "message" -> Create an annotated tag
git tag -> View all tags
git show <tag-name> -> Show details of a specific tag
git tag -d <tag-name> -> Delete a local tag
git push origin <tag-name> -> Push a tag to a remote
git push origin --tags -> Push all tags to a remote
git push --delete origin <tag-name> -> Delete a tag on the remote
git checkout <tag-name> -> Check out a tag

GIT amend -> git commit --amend
When to Use git commit --amend:
Fix mistakes in the most recent commit (message or content).
Combine changes into a single commit if you forgot to stage something.
Update a commit message to clarify what was done.

GIT alias
Git aliases allow you to create custom shortcuts for frequently used Git commands. 
git config --global alias.st "status" (we can use st inplace of status)
git config --unset alias.<alias-name> -> edit aliases directly in the .gitconfig file or remove them

GIT stash - Git stash allows you to temporarily save uncommitted changes
git stash save "Your message here" -> Stash with a message.
git stash list -> List all stashes
git stash show stash@{n} -> View the changes in a specific stash.
git stash apply stash@{n} -> Apply the changes from a stash but keep it in the list.
git stash pop -> Apply the changes and remove the stash from the list.
git stash drop stash@{n} -> Remove a specific stash without applying it.

git diff
git diff is a command used to show the differences between various states of your files in a Git repository.
Unstaged changes: git diff
Staged changes: git diff --cached
Comparing commits or branches: git diff <commit1> <commit2> or git diff <branch1> <branch2>

git merge vs git rebase
Git Merge: Combines two branches with a merge commit, preserving the history of both branches.
Command: git merge <branch>
Git Rebase: Moves commits from one branch onto another, creating a linear history.
Command: git rebase <branch>

git pull vs git fetch 
Git Fetch: Downloads changes from the remote repository to your local repository, 
but does not automatically merge them into your working directory.
Command: git fetch
Git Pull: Downloads changes from the remote repository and automatically merges them into your current branch.
Command: git pull
git pull = git fetch + git merge 

git revert 
git revert is used to undo a commit by creating a new commit that reverses the changes.

Interview Questions

